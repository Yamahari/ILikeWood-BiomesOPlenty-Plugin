plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0, 6.2)'
}

version = "${version_mc}-${version_major}.${version_minor}.${version_patch}"
group = "yamahari.${mod_id}"
archivesBaseName = "${mod_id}"
// group = 'yamahari.ilikewoodxbiomesoplenty' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// archivesBaseName = 'ilikewoodxbiomesoplenty'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

dependencies {
    minecraft "net.minecraftforge:forge:${version_mc}-${version_forge}"
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources', 'src/data/resources/data', 'src/data/resources/textures']
        }
    }

    api {
    }
}

configurations {
    apiImplementation.extendsFrom(minecraft)
}

minecraft {
    mappings channel: 'official', version: "${version_mc}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                ilikewood {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                ilikewood {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'ilikewood.datagen.modid', 'biomesoplenty'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'ilikewood',
                    '--all',
                    '--output', file('src/data/resources/ilikewood_resources'),
                    '--existing', file('src/main/resources/'),
                    '--existing-mod', 'ilikewood',
                    '--existing-mod', 'biomesoplenty'

            mods {
                ilikewoodxbiomesoplenty {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    flatDir {
        dir 'build/libs'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    compileOnly fg.deobf("build.libs:ilikewood:${version_mc}-${version_ilw}:api")
    runtimeOnly fg.deobf("build.libs:ilikewood:${version_mc}-${version_ilw}")

    runtimeOnly fg.deobf("mezz.jei:jei-${version_mc}-forge:${version_jei}")

    runtimeOnly fg.deobf("curse.maven:biomes-o-plenty-220318:${version_bop}")
    runtimeOnly fg.deobf("curse.maven:terrablender-563928:${version_terra_blender}")

    implementation sourceSets.api.output
}

def replaceVersions = tasks.register('replaceVersions', Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'version': version,
                'version_range_mc': version_range_mc,
                'version_range_loader':  version_range_loader,
                'version_range_forge': version_range_forge,
                'version_range_ilw': version_range_ilw,
                'version_range_bop': version_range_bop
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    exclude 'META-INF/mods.toml'
    configure {
        finalizedBy replaceVersions
    }
}

classes.configure {
    dependsOn(replaceVersions)
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    sourceSets.main.resources {
        exclude '**/.cache'
    }

    manifest.attributes([
            "Specification-Title"     : "${mod_id}",
            "Specification-Vendor"    : "yamahari",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : "${mod_id}",
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "yamahari",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name"   : "${mod_id}"
    ])

    finalizedBy 'reobfJar'
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
    dependsOn reobfJar
}